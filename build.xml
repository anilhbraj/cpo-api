<?xml version="1.0" encoding="UTF-8"?>
<!--
 * build.xml
 * 
 *  Copyright (C) 2006  David E. Berry
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *  
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *  
 *  A copy of the GNU Lesser General Public License may also be found at 
 *  http://www.gnu.org/licenses/lgpl.txt
 *
-->
<project name = "Class Persistence Object (CPO)" default = "help" basedir = ".">
    
    <description> Build xml for the cpo.jar </description>
    <!-- set global properties for javac -->
    <property name="compiler.flag.optimize"     value="off"/>
    <property name="compiler.flag.debug"        value="on"/>
    <property name="compiler.flag.deprecated"   value="off "/>

    <!-- set global properties for this build -->
    <property name="project.title"      value="CPO" /> 
    <property name="project.version" value="2.0" />
    <property name="distname"         value="cpo"/>
    <property name="packages"        value="org.synchronoss.cpo.*"/>
    <property name="javadocpackage"        value="org.synchronoss.cpo"/>
    <property name="sealed"             value="org/synchronoss/cpo/"/>
    <property name="mainclass"        value=""/>
    <property name="company"         value="David E. Berry"/>
    <property name="copyright"         value="Copyright Â© 2001-2006 ${company}"/>

    <!-- set default directories  for this build -->
    <property name="common" location="../lib"/>
    <property name="build"     location="${basedir}/build"/>
    <property name="classes" location="${build}/classes"/>
    <property name="instrumented.classes" location="${build}/instrumented-classes"/>
    <property name="depend"  location="${build}/depend"/>
    <property name="dist"       location="${basedir}/dist"/>
    <property name="lib"         location="${basedir}/lib"/>
    <property name="lib.inc"    location="${basedir}/inclib"/>
    <property name="src"        location="${basedir}/src"/>
    <property name="api"        location="${basedir}/doc/api"/>
    <property name="test"       location="${basedir}/test"/>
    <property name="test.src"  location="${test}/src"/>
    <property name="test.classes"  location="${test}/classes"/>
    <property name="test.results.dir"  location="${test}/data"/>
    <property name="test.reports.dir"  location="${test}/reports"/>
    <property name="junit.reports" location="${test.reports.dir}/junit"/>
    <property name="jcoverage.reports" location="${test.reports.dir}/jcoverage"/>
    <property name="testlib"    location="${test}/lib"/>
    <property name="meta-inf" location="${src}/META-INF"/>
    
    <!-- <property name="JAVA_HOME" value="/opt/jdk14"/> -->


    <!-- load the environment variables -->
    <property environment="env"/>
    
    <!-- define the third-party tasks -->
    <!-- JCoverage -->
    <taskdef resource="tasks.properties" classpath="${lib}/jcoverage.jar" />
    <taskdef classpath="/opt/jcoverage/jcoverage.jar" resource="tasks.properties"/>
    <!-- proguard obfuscator -->
    <taskdef resource="proguard/ant/task.properties" classpath="${lib}/proguard.jar" />

    <target name="init">
        <!--<fail message="JAVA_HOME is not defined" unless="env.JAVA_HOME"/>-->
        <tstamp>
            <format property="timestamp.isoformat" pattern="yyyy-MMM-dd HH:mm:ss"/>
        </tstamp>

        <!-- Create required default dirs if they do not exist -->
        <mkdir dir="${testlib}"/>
        <mkdir dir="${common}"/>

    
        <path id="compile.classpath">
           <fileset dir="${lib}">
               <include name="**/*.jar"/>
               <include name="**/*.zip"/>
           </fileset>
           <fileset dir="${lib.inc}">
               <include name="**/*.jar"/>
               <include name="**/*.zip"/>
           </fileset>
       </path>
        
        <path id="test.classpath">
           <path refid="compile.classpath"/>
           <pathelement location="${dist}/${distname}.jar"/>
           <!--<pathelement location="${classes}"/> -->
            <pathelement location="${test.classes}"/>
            <pathelement location="${testlib}"/>
           <fileset dir="${testlib}">
               <include name="**/*.jar"/>
               <include name="**/*.zip"/>
           </fileset>
       </path>
    </target>

    <!-- Removes all .class files -->
    <target name="classclean" >
        <delete dir="${classes}"/> 
        <delete dir="${depend}"/> 
    </target>
    
    <!-- Removes all .class files -->
    <target name="testclean" >
        <delete dir="${test.classes}"/> 
    </target>

    <!-- Removes all distributable .jar files -->
    <target name="distclean" >
        <delete dir="${dist}"/> 
    </target>

  <!--  Normal build of application  --> 
     <target name="compile" depends="init">
        <mkdir dir="${classes}"/>

        <!-- Do a more thorough Dependecy checking for the source code. Checks referenced classes -->
        <depend srcdir="${src}"  
                     destdir="${classes}"
                     cache="${depend}"
                     closure="true"
                     classpath="${lib}"/>

        <property name="compile.classpath" refid="compile.classpath" />
        <echo>Compile classpath: ${compile.classpath}</echo>
        <javac srcdir="${src}" 
                   destdir="${classes}"
                   debug="${compiler.flag.debug}"
                   deprecation="${compiler.flag.deprecated}"
                   optimize="${compiler.flag.optimize}">
            <classpath refid="compile.classpath"/> 
        </javac>
    </target>

     <!-- Build the jar . Make sure the code is up-to-date -->
     <target name="dist" depends="compile" description="Build Distribution">
         <mkdir dir="${dist}"/> 
      <!-- Copy all the .properties files that are buried in the source tree to the classes dir for JARing -->
      <copy todir="${classes}">
        <fileset dir="${src}">
          <include name="**/*.properties"/>
        </fileset>
      </copy>

      <path id="include.classpath">
          <fileset dir="${lib.inc}">
              <include name="**/*.jar"/>
              <include name="**/*.zip"/>
          </fileset>
     </path>

      <property name="man-path" refid="include.classpath" />
      <pathconvert property="manifest.classpath" refid="include.classpath" dirsep="/" pathsep=" ">
          <map from="${lib.inc}" to="."/>
      </pathconvert>
      
      <echo>${lib.inc} </echo>
      <echo>Unconverted Manifest Classpath is: ${man-path}</echo>
      <echo>Manifest Classpath is: ${manifest.classpath}</echo>

      <manifest file="${build}/MANIFEST.MF">
          <attribute name="Built-By" value="${company}"/>
          <attribute name="Built-On" value="${timestamp.isoformat}"/>
          <attribute name="Main-Class" value="${mainclass}"/>
          <attribute name="Class-Path" value="${manifest.classpath}"/>
          <section name="${sealed}">
              <attribute name="Sealed" value="true"/>
          </section>
      </manifest>

        <jar destfile="${dist}/${distname}-raw.jar"
              basedir="${classes}"
              index="true"
              manifest="${build}/MANIFEST.MF"> 
        </jar>

        <!-- Obfuscate the library -->
        <proguard shrink="true" optimize="true" obfuscate="true">
            <injar file="${dist}/${distname}-raw.jar" /> 
            <outjar file="${dist}/${distname}.jar" /> 
            <libraryjar file="${lib}/ojdbc14.jar" /> 
            <libraryjar file="${lib.inc}/log4j.jar" /> 
            <libraryjar file="${lib}/rt.jar" /> 
            <libraryjar file="${lib}/j2ee.jar" />
            <keep type="interface" name="${packages}">
                <field name="*"/>
                <method access="public" name="*"/>
            </keep>
            <keep type="class" name="${packages}">
                <method access="public" name="*"/>
                <constructor access="public" name="*"/>
            </keep>
            <keep implements="${packages}">
                <method access="public" name="*"/>
                <method access="protected" name="getWriteConnection"/>
                <constructor access="public" name="*"/>
            </keep>
            <keep implements="java.sql.*">
                <method access="public" name="*"/>
                <constructor access="public" name="*"/>
            </keep>
            <keep type="class" name="org.synchronoss.cpo.transform.**">
                <method access="public" name="*"/>
            </keep>
            <keep type="class" name="org.synchronoss.cpo.jdbc.JavaSqlTypes">
                <method access="public" name="*"/>
            </keep>
            <keep type="class" name="org.synchronoss.cpo.jdbc.JdbcDataSourceInfo">
                <method access="public" name="*"/>
                <constructor access="public" name="*"/>
            </keep>
        </proguard>

    </target>

    <!-- Javadocs -->
    <target name="docs" depends="init">
        <delete dir="${api}"/> 
        <mkdir dir="${api}"/> 

        <javadoc
           destdir="${api}"
           author="true"
           version="true"
           use="true"
           maxmemory="256M"
           public="true"
           packagenames="${javadocpackage}"
           windowtitle="${project.title} API Documentation" 
           doctitle="${project.title} API Documentation (Version ${project.version})" 
           bottom="${copyright}"
           classpath="${classes}"
           classpathref="compile.classpath">
           <fileset dir="${src}" defaultexcludes="yes">
                <include name="**/CpoObject.java"/>
                <include name="**/CpoAdapter.java"/>
                <include name="**/CpoOrderBy.java"/>
                <include name="**/CpoReleasible.java"/>
                <include name="**/CpoTrxAdapter.java"/>
                <include name="**/CpoException.java"/>
                <include name="**/CpoWhere.java"/>
                <include name="**/JdbcCpoAdapter.java"/>
                <include name="**/TransformNoOp.java"/>
                <include name="**/JdbcDataSourceInfo.java"/>
                <include name="**/JdbcCallableStatementFactory.java"/>
                <include name="**/JdbcPreparedStatementFactory.java"/>
            </fileset>
        </javadoc>
    </target>

    <!-- JUnit tests -->
    <target name="inittest">
        <!-- Sets up the hsqldb for the test -->
        <delete dir="${test.classes}"/>
        <delete dir="${test.results.dir}"/>
        <delete dir="${junit.reports}"/>
        <!--<delete dir="${jcoverage.reports}"/>-->
        <!--<delete dir="${test.reports.dir}"/>-->
        <delete>
            <fileset dir="${basedir}">
              <include name="**/collector.csv"/>
            </fileset>
        </delete>

        <delete dir="${instrumented.classes}"/>
        <mkdir dir="${test.classes}"/>
        <mkdir dir="${test.results.dir}"/>
        <mkdir dir="${test.reports.dir}"/>
        <mkdir dir="${junit.reports}"/>
        <!--<mkdir dir="${jcoverage.reports}"/>
        <mkdir dir="${instrumented.classes}"/>-->
    </target>

    <target name="test-compile" depends="testclean,inittest">
        <!-- Compile the tests -->
        <javac srcdir="${test.src}" 
                   destdir="${test.classes}"
                   debug="${compiler.flag.debug}"
                   deprecation="${compiler.flag.deprecated}"
                   optimize="${compiler.flag.optimize}">
            <classpath refid="test.classpath"/> 
        </javac>
        <copy todir="${test.classes}">
          <fileset dir="${test.src}">
            <exclude name="**/*.java"/>
          </fileset>
        </copy>
    </target>

    <target name="test" depends="test-compile" description="Run JCoverage and Junits">
        <!-- Instrument the classes for JCoverage -->
        <!-- Need a license for this 
        <instrument todir="${instrumented.classes}" collector="csv" database="${jcoverage.reports}">
            <fileset dir="${classes}">
                <include name="**/*.class"/>
            </fileset>
        </instrument>
        -->
       <property name="test.classpath" refid="test.classpath" />
       <echo>Compile classpath: ${test.classpath}</echo>

       <!-- Start up the HSQLDB jUnit db -->
       <java classpath="${test}/lib/hsqldb.jar" classname="org.hsqldb.Server" fork="true" spawn="true">
           <arg line="-database.0 ${test}/db/cpoTest -dbname.0 cpoTest"/>
       </java>
       
        <!-- Run the tests -->
        <junit printsummary="withOutAndErr" errorProperty="test.failed" failureProperty="test.failed" fork="true" showoutput="true">
            <classpath path="${classes}"/>
            <classpath refid="test.classpath"/>
            <formatter usefile="false" type="brief"/>
            <formatter type="xml" />
            <batchtest todir="${test.results.dir}">
                <fileset dir="${test.src}">
                    <include name="**/*Test*.java"/>
                </fileset>
            </batchtest>
        </junit>

       <!-- Stop HSQLDB jUnit db -->
       <java jar="${test}/lib/hsqldb.jar" inputstring="sa001" fork="yes">
           <arg line="--inlinerc url=jdbc:hsqldb:hsql://localhost/cpoTest,user=sa --sql 'shutdown'"/>
       </java>    

        <!-- <bulk-import database="${jcoverage.reports}">
            <fileset dir="${basedir}">
                <include name="**/collector.csv"/>
            </fileset>
        </bulk-import>
        -->
        <junitreport todir="${junit.reports}">
            <fileset dir="${test.results.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.reports}"  />
        </junitreport>
        <!--
        <report srcdir="${src}" destdir="${jcoverage.reports}" historical="yes" checkpoint="yes">
             <instrumentation file="${jcoverage.reports}"/> 
        </report>
        -->
    </target>

    <!-- Removes both .class and all distributable .jar files -->
     <target name="clean" depends="classclean, distclean"/>
    <!--  Clean build of application --> 
     <target name="all" depends="clean, dist, test, docs"/>
    
    <target name="help">
        <echo>/** </echo>
        <echo>* Build.xml for ${project.title} </echo>
        <echo>* </echo>
        <echo>* Targets:</echo>
        <echo>*       all - Build and test everything</echo>
        <echo>*     clean - Removes all files generated by the java compiler </echo>
        <echo>*   compile - Compiles updated .java files</echo>
        <echo>*    deploy - deploy the code</echo>
        <echo>*      dist - Compiles updated .java files, jars distribution files</echo>
        <echo>* distclean - Clean up distribution files only</echo>
        <echo>*      docs - Generates the javadocs for the project</echo>
        <echo>*      help - displays available targets</echo>
        <echo>*      test - Builds dist, runs JUnit tests</echo>
        <echo>*/</echo>
    </target>

</project>

