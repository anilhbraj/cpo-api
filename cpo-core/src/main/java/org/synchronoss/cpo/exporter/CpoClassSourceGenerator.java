package org.synchronoss.cpo.exporter;

import org.synchronoss.cpo.MetaVisitor;
import org.synchronoss.cpo.meta.domain.*;

/**
 * FIXME - add description
 *
 * @author Michael Bellomo
 * @since 4/17/12
 */
public class CpoClassSourceGenerator implements MetaVisitor {

  String className = null;

  StringBuilder header = new StringBuilder();
  StringBuilder properties = new StringBuilder();
  StringBuilder gettersSetters = new StringBuilder();
  StringBuilder toString = new StringBuilder();
  StringBuilder equals = new StringBuilder();
  StringBuilder hashCode = new StringBuilder();
  StringBuilder footer = new StringBuilder();

  boolean isFirstAttribute = true;
  boolean isFirstFunctionGroup = true;

  public CpoClassSourceGenerator() {
  }

  public String getSourceCode () {
    StringBuilder source = new StringBuilder();

    source.append("/** This class auto-generated by " + this.getClass().getName() + " **/\n\n");
    source.append(header);

    source.append(properties);

    // generate getters and setters
    gettersSetters.append("  /* Getters and Setters */\n");
    source.append(gettersSetters);
    gettersSetters.append("\n");

    // generate equals()
    source.append(equals);

    // generate hashCode()
    source.append(hashCode);

    source.append(toString);

    source.append(footer);

    // end class
    source.append("}\n");

    return source.toString();
  }

  @Override
  public void visit(CpoClass cpoClass) {
    className = cpoClass.getName();

    // generate class header
    if (className.lastIndexOf(".") != -1) {
      String packageName = className.substring(0, className.lastIndexOf("."));
      className = className.substring(className.lastIndexOf(".") + 1);
      header.append("package " + packageName + ";\n\n");
    }

    // generate class declaration
    header.append("public class " + className + " implements java.io.Serializable {\n");
    header.append("\n");

    // generate constructor
    header.append("\n");
    header.append("  public " + className + "() {\n");
    header.append("  }\n\n");
  }

  @Override
  public void visit(CpoAttribute cpoAttribute) {
    if (isFirstAttribute) {
      header.append("  /* Attribute name statics */\n");
    }

    String attName = cpoAttribute.getJavaName();
    String attClassName = cpoAttribute.getJavaType();

    String staticName = "ATTR_" + attName.toUpperCase();
    header.append("  public final static String " + staticName + " = \"" + attName + "\";\n");

    header.append("\n");

    properties.append("\n");

    // generate property declarations
    if (isFirstAttribute) {
      properties.append("  /* Properties */\n");
    }

    properties.append("  private " + attClassName + " " + attName + ";\n");

    // generate getter
    gettersSetters.append("  public " + attClassName + " " + generateGetterName(attName) + " {\n");
    gettersSetters.append("    return this." + attName + ";\n");
    gettersSetters.append("  }\n");

    // generate setter
    if (attName.length() > 1) {
      gettersSetters.append("  public void set" + attName.substring(0, 1).toUpperCase() + attName.substring(1) + "(" + attClassName + " " + attName + ") {\n");
    } else {
      gettersSetters.append("  public void set" + attName.toUpperCase() + "(" + attClassName + " " + attName + ") {\n");
    }
    gettersSetters.append("    this." + attName + " = " + attName + ";\n");
    gettersSetters.append("  }\n");

    isFirstAttribute = false;
  }

  @Override
  public void visit(CpoFunctionGroup cpoFunctionGroup) {
    header.append("\n");

    // generate statics for function group
    if (isFirstFunctionGroup) {
      header.append("  /* Query group statics */\n");
      isFirstFunctionGroup = false;
    }

    String qgName = cpoFunctionGroup.getName();
    if (qgName == null)
      qgName = "NULL";

    String staticName = "QG_" + cpoFunctionGroup.getType() + "_" + qgName.toUpperCase();

    if (cpoFunctionGroup.getName() == null) {
      header.append("  public final static String " + staticName + " = null;\n");
    } else {
      header.append("  public final static String " + staticName + " = \"" + qgName + "\";\n");
    }
  }

  @Override
  public void visit(CpoFunction cpoFunction) {
    // nothing to do
  }

  @Override
  public void visit(CpoArgument cpoArgument) {
    // nothing to do
  }

  private String generateGetterName(String attName) {
    if (attName.length() > 1) {
      return ("get" + attName.substring(0, 1).toUpperCase() + attName.substring(1) + "()");
    }
    return ("get" + attName.toUpperCase() + "()");
  }
}
